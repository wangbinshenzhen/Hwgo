apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply from: '../config/android/init.gradle'
apply from: '../config/android/flavors.gradle'
android {
    defaultConfig {
        applicationId "com.wangbin.kelin"
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86", "armeabi"
        }
    }
    signingConfigs {

        defaultSign {
            keyAlias rootProject.ext.signing_default.keyAlias
            keyPassword rootProject.ext.signing_default.keyPassword
            storeFile file(rootProject.ext.signing_default.storeFile)
            storePassword rootProject.ext.signing_default.storePassword
        }

        releaseSign {
            keyAlias rootProject.ext.signing_release.keyAlias
            keyPassword rootProject.ext.signing_release.keyPassword
            storeFile file(rootProject.ext.signing_release.storeFile)
            storePassword rootProject.ext.signing_release.storePassword
        }
    }
    buildTypes {

        debug {
            signingConfig signingConfigs.defaultSign
            jniDebuggable true
            debuggable true
            shrinkResources false
            minifyEnabled false
        }

        release {
            signingConfig signingConfigs.releaseSign
            jniDebuggable false
            debuggable false
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'


        }

    }
    //build apk包名
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appFlag = 'hwgo'
            // 环境标识
            def envFlagMap = [
                    'flavorsOne': 'One_'
            ]
            def flavorString = variant.getVariantData().getVariantConfiguration().getFlavorName()
            def envFlag = envFlagMap.get(flavorString)
            def appVersion = defaultConfig.versionName
            // 构建时间，注意时区
            def buildTime = new Date().format('yyyy-MM-dd HH:mm', TimeZone.getTimeZone('GMT+8:00'))
            //获取当前分支名
            def cmd = 'git symbolic-ref --short -q HEAD'
            def branch = cmd.execute().text.trim().toString()
            if (project.hasProperty('GIT_BRANCH')) {
                branch = GIT_BRANCH
            }
            // 上架标识
            def uploadFlag = 'T'
            if (flavorString == "production") {
                uploadFlag = 'U'
            }
            def packageName = "${appFlag}_${envFlag}${appVersion}_${buildTime}_${branch}_${uploadFlag}"
            if (variant.name.contains("Debug")) {
                packageName = "${packageName}_debug"
            }
            outputFileName = new File("./", "${packageName}.apk")
        }
    }
    dexOptions {
        preDexLibraries true //对Libraries进行预编译
        javaMaxHeapSize "2g" //用于dex的jvm大小
        dexInProcess true //并行编译dex文件
        maxProcessCount 8 //并行编译线程，设置为cpu数
    }
}


dependencies {
    implementation project(':common')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':rxjavastudy')
    implementation project(':kotlinstudy')
    implementation rootProject.ext.dependencies["multidex"]
    //    implementation rootProject.ext.dependencies["rxlifecycle_components"]
}